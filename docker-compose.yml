version: '3.2'

services:
  db:
    restart: always
    image: postgres
    container_name: noteapp_db
    volumes:
      - type: volume
        source: dbdata
        target: /pg_data
    ports:
      - "8001:5432"
  es:
    labels:
      com.example.service: "es"
      com.example.description: "For searching and indexing data"
    build:
      context: ./noteapp/docker_compose/elasticsearch/
      dockerfile: Dockerfile
    container_name: noteapp_es
    restart: always
    ports:
     - "9200:9200"
    volumes:
      - type: volume
        source: esdata
        target: /usr/share/elasticsearch/data/
  kibana:
    labels:
      com.example.service: "kibana"
      com.example.description: "Data visualisation and for log aggregation"
    build:
      context: ./noteapp/docker_compose/kibana/
      dockerfile: Dockerfile
    container_name: noteapp_kibana
    ports:
      - "5601:5601"
    depends_on:
      - es
  logstash:
    labels:
      com.example.service: "logstash"
      com.example.description: "For logging data"
    build:
      context: ./noteapp/docker_compose/logstash/
      dockerfile: Dockerfile
    container_name: noteapp_logstash
    ports:
      - "5959:5959"
    depends_on:
    - es
  django_web:
    container_name: noteapp_django_web
    labels:
      com.example.service: "web"
      com.example.description: "Use for the main web process"
    build:
      context: ./noteapp/docker_compose/django/
      dockerfile: Dockerfile
    image: noteapp_django_web:1.0
    depends_on:
      - db
      - es
      - kibana
      - logstash
    command: ["./docker_compose/django/wait_for_postgres.sh"]
    ports:
      - "8000:8000"
    expose:
      - "5959"
    logging:
      driver: "json-file"
    volumes:
      - ./noteapp:/app

volumes:
  dbdata:
  esdata:
